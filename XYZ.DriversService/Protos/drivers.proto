syntax = "proto3";

option csharp_namespace = "XYZ.DriversService.Protos";

package drivers;

// Servicio de Choferes
service Drivers {
  rpc CreateDriver(CreateDriverRequest) returns (DriverResponse);
  rpc GetDriver(GetDriverRequest) returns (DriverResponse);
  rpc GetAllDrivers(GetAllDriversRequest) returns (GetAllDriversResponse);
  rpc UpdateDriver(UpdateDriverRequest) returns (DriverResponse);
  rpc DeleteDriver(DeleteDriverRequest) returns (DeleteDriverResponse);
  rpc GetAvailableDrivers(GetAvailableDriversRequest) returns (GetAllDriversResponse);
  rpc AssignDriver(AssignDriverRequest) returns (AssignDriverResponse);
  rpc UnassignDriver(UnassignDriverRequest) returns (UnassignDriverResponse);
}

// Mensajes de Request
message CreateDriverRequest {
  string first_name = 1;
  string last_name = 2;
  string license_number = 3;
  int32 license_category = 4; // LicenseCategory enum
  int32 driver_type = 5; // DriverType enum
  string phone = 6;
  string email = 7;
  string address = 8;
}

message GetDriverRequest {
  int32 id = 1;
}

message GetAllDriversRequest {
  int32 page = 1;
  int32 page_size = 2;
  int32 driver_type = 3; // Filtro opcional
  bool available_only = 4;
}

message UpdateDriverRequest {
  int32 id = 1;
  string first_name = 2;
  string last_name = 3;
  string license_number = 4;
  int32 license_category = 5;
  int32 driver_type = 6;
  string phone = 7;
  string email = 8;
  string address = 9;
  int32 status = 10;
}

message DeleteDriverRequest {
  int32 id = 1;
}

message GetAvailableDriversRequest {
  int32 driver_type = 1; // Filtro por tipo
  int32 page = 2;
  int32 page_size = 3;
}

message AssignDriverRequest {
  int32 driver_id = 1;
  int32 vehicle_id = 2;
  int32 route_id = 3;
}

message UnassignDriverRequest {
  int32 driver_id = 1;
}

// Mensajes de Response
message DriverResponse {
  bool success = 1;
  string message = 2;
  DriverDto driver = 3;
}

message GetAllDriversResponse {
  bool success = 1;
  string message = 2;
  repeated DriverDto drivers = 3;
  int32 total_count = 4;
  int32 page = 5;
  int32 page_size = 6;
}

message DeleteDriverResponse {
  bool success = 1;
  string message = 2;
}

message AssignDriverResponse {
  bool success = 1;
  string message = 2;
}

message UnassignDriverResponse {
  bool success = 1;
  string message = 2;
}

// DTOs
message DriverDto {
  int32 id = 1;
  string first_name = 2;
  string last_name = 3;
  string full_name = 4;
  string license_number = 5;
  int32 license_category = 6;
  string license_category_name = 7;
  int32 driver_type = 8;
  string driver_type_name = 9;
  string phone = 10;
  string email = 11;
  string address = 12;
  int32 status = 13;
  string status_name = 14;
  bool is_available = 15;
  int32 current_vehicle_id = 16;
  int32 current_route_id = 17;
  string created_at = 18;
  string updated_at = 19;
}